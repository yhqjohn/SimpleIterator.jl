var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SimpleIterator","category":"page"},{"location":"#SimpleIterator","page":"Home","title":"SimpleIterator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SimpleIterator.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleIterator.jl is a Julia package that provides a simple Python-like iterator interface for Julia. It enables the iteration of an object x becomes iteration over iterator(x). The iteration behavior can be easily customized by overloading the iterator function and returning the desired iterator object.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@iterfn\niterator\nIteratorType","category":"page"},{"location":"#SimpleIterator.@iterfn","page":"Home","title":"SimpleIterator.@iterfn","text":"@iterfn\n\nDefine a iterator for a type. The type should have a function named iterator which returns a iterator. After the macro is called, iteration over the type will automatically becomes iteration over the iterator.\n\nArguments\n\nfundef: function definition to be decorated, the function name should be iterator.\n\nExample\n\nstruct MyType\n    data::Vector{Int}\nend\n\n@iterfn iterator(x::MyType) = x.data\n\nfor i in MyType([1, 2, 3])\n    println(i)\nend\n\n\n\n\n\n","category":"macro"},{"location":"#SimpleIterator.iterator","page":"Home","title":"SimpleIterator.iterator","text":"iterator(x)\n\nOverload this function to define the iterator for a type. The function should return a iterator. This function MUST be overloaded with the @iterfn macro.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleIterator.IteratorType","page":"Home","title":"SimpleIterator.IteratorType","text":"IteratorType(::Type{T})\n\nReturn the iterator type of a type. Overload this function to define the iterator type of a type. The function should return a type. The default implementation is Any. Overload this function to enable iteration utilities related to the type such as Base.length and Base.eltype. If the iterator function is defined with return type annotation, this function will be automatically overloaded.\n\n\n\n\n\n","category":"function"}]
}
